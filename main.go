// Code generated by hertz generator.

package main

import (
	"fmt"
	"log"
	"net"
	"time"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/route"
	"github.com/cloudwego/kitex/pkg/transmeta"
	"github.com/hertz-contrib/pprof"
	"ququiz.org/lintang/quiz-query-service/biz/dal/mongodb"
	rediscache "ququiz.org/lintang/quiz-query-service/biz/dal/mongodb/redisCache"
	"ququiz.org/lintang/quiz-query-service/biz/router"
	"ququiz.org/lintang/quiz-query-service/biz/service"
	"ququiz.org/lintang/quiz-query-service/config"
	"ququiz.org/lintang/quiz-query-service/kitex_gen/go_hertz_template_lintang/pb/helloservice"
	"ququiz.org/lintang/quiz-query-service/pkg"

	kitexServer "github.com/cloudwego/kitex/server"
)

func main() {
	cfg, err := config.NewConfig()
	if err != nil {
		hlog.Fatalf("Config error: %s", err)
	}
	logsCores := pkg.InitZapLogger(cfg)
	defer logsCores.Sync()
	hlog.SetLogger(logsCores)

	h := server.Default(
		server.WithHostPorts(fmt.Sprintf(`0.0.0.0:%s`, cfg.HTTP.Port)),
		server.WithExitWaitTime(4*time.Second),
	)

	h.Use(pkg.AccessLog())

	pprof.Register(h)
	var callback []route.CtxCallback

	// service & router
	mongo := mongodb.NewMongo(cfg)
	rds := rediscache.NewRedis(cfg)

	// repository
	quizRepo := mongodb.NewQuizRepository(mongo.Conn)
	questionRepo := mongodb.NewQuestionRepository(mongo.Conn)

	cacheRepo := rediscache.NewRedisCache(rds.Client)

	// service
	questionService := service.NewQuestionService(questionRepo, cacheRepo)
	quizService := service.NewQuizService(quizRepo)

	// router 
	router.QuizRouter(h, quizService, questionService)

	callback = append(callback, mongo.Close, rds.Close)
	h.Engine.OnShutdown = append(h.Engine.OnShutdown, callback...) /// graceful shutdown

	addr, _ := net.ResolveTCPAddr("tcp", fmt.Sprintf(`127.0.0.1:%s`, cfg.GRPC.URLGrpc)) // grpc address
	var opts []kitexServer.Option
	opts = append(opts, kitexServer.WithMetaHandler(transmeta.ServerHTTP2Handler))
	opts = append(opts, kitexServer.WithServiceAddr(addr))
	srv := helloservice.NewServer(new(HelloServiceImpl), opts...) //grpc server

	go func() {
		// start kitex rpc server (grpc)
		err := srv.Run()
		if err != nil {
			log.Fatal(err)
		}
	}()

	h.Spin()
}
